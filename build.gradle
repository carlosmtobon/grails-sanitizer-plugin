buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:3.3.4"
        classpath "io.github.gradle-nexus:publish-plugin:1.0.0"
    }
}

plugins {
    id 'maven-publish'
}


group "io.github.carlosmtobon"
version "1.0.1"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"org.grails.grails-plugin"
apply plugin:"org.grails.grails-gsp"
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: "io.github.gradle-nexus.publish-plugin"

repositories {
    maven { url "https://repo.grails.org/grails/core" }
    maven { url "https://repo.grails.org/grails/plugins/" }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    compileOnly "io.micronaut:micronaut-inject-groovy"
    console "org.grails:grails-console"
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-autoconfigure"
    implementation "org.grails:grails-core"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-tomcat"
    implementation "org.grails:grails-web-boot"
    implementation "org.grails:grails-logging"
    implementation "org.grails:grails-plugin-rest"
    implementation "org.grails:grails-plugin-databinding"
    implementation "org.grails:grails-plugin-i18n"
    implementation "org.grails:grails-plugin-services"
    implementation "org.grails:grails-plugin-url-mappings"
    implementation "org.grails:grails-plugin-interceptors"
    implementation "org.grails.plugins:cache"
    implementation "org.grails.plugins:async"
    implementation "org.grails.plugins:scaffolding"
    implementation "org.grails.plugins:gsp"
    profile "org.grails.profiles:web-plugin"
    runtimeOnly "com.bertramlabs.plugins:asset-pipeline-grails:3.3.4"
    testImplementation "io.micronaut:micronaut-inject-groovy"
    testImplementation "org.grails:grails-gorm-testing-support"
    testImplementation "org.mockito:mockito-core"
    testImplementation "org.grails:grails-web-testing-support"
    // from grails-sanitizer
    implementation('org.owasp.antisamy:antisamy:1.7.3')
    runtimeOnly('net.sourceforge.nekohtml:nekohtml:1.9.22') {
        exclude group: "xml-apis"
    }
    implementation('org.kuali.maven.wagons:maven-s3-wagon:1.2.1') {
        exclude module: 'slf4j-log4j12'
    }

    implementation('org.grails.plugins:rest-client-builder:2.1.1') {
        exclude module: 'slf4j-log4j12'
    }

}

bootRun {
    ignoreExitValue true
    jvmArgs(
        '-Dspring.output.ansi.enabled=always', 
        '-noverify', 
        '-XX:TieredStopAtLevel=1',
        '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
}

// enable if you wish to package this plugin as a standalone application
bootJar.enabled = false

//assets {
//    packagePlugin = true
//}


publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = 'grails-sanitizer-plugin'
            version = project.version

            from components.java
//            artifact sourcesJar
            artifact javadocJar

            pom {
                name = "Grails Sanitizer"
                description = "A Grails Plugin for sanitizing markup using the OWASP AntiSamy library."
                url = "https://github.com/carlosmtobon/grails-sanitizer-plugin"
                licenses {
                    license {
                        name = "MIT License"
                        url = "https://github.com/carlosmtobon/grails-sanitizer-plugin/blob/master/LICENSE.txt"
                    }
                }
                developers {
                    developer {
                        id = "carlosmtobon"
                        name = "Carlos Tobon"
                        email = "carlos.mauro.tobon@gmail.com"
                    }
                    developer {
                        id = "charlesamat"
                        name = "Charles Amat"
                        email = "charlesamat@gmail.com"
                    }
                    developer {
                        id = "danieldbower"
                        name = "Daniel Bower"
                        email = "daniel@bowerstudios.com"
                    }
                }
                scm {
                    connection = "scm:git:git://github.com/carlosmtobon/grails-sanitizer-plugin.git"
                    developerConnection = "scm:git:ssh://github.com:carlosmtobon/grails-sanitizer-plugin.git"
                    url = "https://github.com/carlosmtobon/grails-sanitizer-plugin/tree/master"
                }
            }
        }
    }
}


//
sourceSets {
    main {
        resources {
            srcDirs = ['src/main/groovy']
        }
    }
}

ext."signing.keyId" = project.hasProperty("signing.keyId") ? project.getProperty('signing.keyId') : System.getenv('SIGNING_KEY_ID')
ext."signing.password" = project.hasProperty("signing.password") ? project.getProperty('signing.password') : System.getenv('SIGNING_PASSPHRASE')
ext."signing.secretKeyRingFile" = project.hasProperty("signing.secretKeyRingFile") ? project.getProperty('signing.secretKeyRingFile') : (System.getenv('SECRING_FILE')?:"${System.properties['user.home']}${File.separator}.gnupg${File.separator}secring.gpg")

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

afterEvaluate {
    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
        sign publishing.publications.maven
    }
}

tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}

nexusPublishing {
    repositories {
        sonatype {
            def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
            def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''
            def ossStagingProfileId = System.getenv("SONATYPE_STAGING_PROFILE_ID") ?: project.hasProperty("sonatypeOssStagingProfileId") ? project.sonatypeOssStagingProfileId : ''
            nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
            snapshotRepositoryUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
            username = ossUser
            password = ossPass
            stagingProfileId = ossStagingProfileId
        }
    }
}